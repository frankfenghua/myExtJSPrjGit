/*
 * File: app/store/GUSJsonTreeStore.js
 *
 * This file was generated by Sencha Architect version 2.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.store.GUSJsonTreeStore', {
    extend: 'Ext.data.TreeStore',
    requires: [
        'MyApp.model.GUSJsonTreeModel'
//        ,
//        'MyApp.data.reader.MyJsonReader'
//        ,
    ],

//    config: {
//        gjsonData: function(){
//            var url = 'http://localhost/js/myExtJSPrjGit/UITestBed/data/gus_qa001.xml' ;
//            var xml = new JKL.ParseXML( url, null );
//
//            var gjsonData = xml.parse();
//            return   gjsonData;
//        }
//    },
	/**
	 * override fillNode only foe this class, not globally
	 */
    fillNode: function(node, newNodes) {

        var me = this,
            ln = newNodes ? newNodes.length : 0,
            sorters = me.sorters,
            i, sortCollection,
            needsIndexSort = false,
            performLocalSort = ln && me.sortOnLoad && !me.remoteSort && sorters && sorters.items && sorters.items.length,
            node1, node2;

        // See if there are any differing index values in the new nodes. If not, then we do not have to sortByIndex
        for (i = 1; i < ln; i++) {
            node1 = newNodes[i];
            node2 = newNodes[i - 1];
            needsIndexSort = node1[node1.persistenceProperty].index != node2[node2.persistenceProperty].index;
            if (needsIndexSort) {
                break;
            }
        }

        // If there is a set of local sorters defined.
        if (performLocalSort) {
            // If sorting by index is needed, sort by index first
            if (needsIndexSort) {
                me.sorters.insert(0, me.indexSorter);
            }
            sortCollection = new Ext.util.MixedCollection();
            sortCollection.addAll(newNodes);
            sortCollection.sort(me.sorters.items);
            newNodes = sortCollection.items;

            // Remove the index sorter
            me.sorters.remove(me.indexSorter);
        } else if (needsIndexSort) {
            Ext.Array.sort(newNodes, me.sortByIndex);
        }

        node.set('loaded', true);
        for (i = 0; i < ln; i++) {
            if(!node.isRoot()){
                if(node.raw.node){
                    node.appendChild(newNodes[i], undefined, true);
                    if( !newNodes[i].raw.node ){
                        newNodes[i].set('leaf',true);
                    }
                }else{
                    node.set('leaf',true);
                }
            }else{
                node.appendChild(newNodes[i], undefined, true);
            }
        }

        return newNodes;
    },

    constructor: function(cfg) {
        var me = this;


        me.gjsonData = me.initXmlTree();
//        me.initConfig(cfg);

        cfg = cfg || {};
        me.callParent([Ext.apply({

            autoLoad: true,
            storeId: 'GUSJsonTreeStore',
            model: 'MyApp.model.GUSJsonTreeModel',
            root: {
                name: 'People',
                label: 'People',
                nodeid: 'root_nodeid',
                expanded: true
            } ,
            proxy: {
//                type: 'ajax',
//                url: 'data/gus_org.xml',
//                url: 'data/gus_full.xml',
//                url: 'data/gus_qa001.xml',
                type: 'memory',
                data: me.gjsonData,
                reader: {
                    type: 'json',
                    root: function(o) {
                        if (o.explorer) { //root
                            return o.explorer.node;     // for treegrid_nested_json2.json
                        } else {
                            return o.node; // for    treegrid_nested_json.json
                        }
                    }
                }
            },
            listeners:{
                beforeexpand: {
                    fn: me.onXmltreestoreBeforeExpand,
                    scope: me
                },
                expand:{
                    fn: me.onXmltreestoreExpand,
                    scope: me
                },
                append:{
                    fn: me.onXmltreestoreAppend,
                    scope:me
                },
                load:{
                    fn:me.onXmltreestoreLoad,
                    scope:me
                }
            }
        }, cfg)]);


    },

    initXmlTree:function(){
//        var url = 'http://localhost/js/myExtJSPrjGit/UITestBed/data/gus_qa001.xml' ;
        var url = 'data/gus_qa001.xml' ;
        var xml = new JKL.ParseXML( url, null );

        var gjsonData = xml.parse();
        return   gjsonData;
    },

    onXmltreestoreBeforeExpand: function(treestore, options) {
        console.log("onXmltreestoreBeforeExpand()" + " :  treestore.data.label = " + treestore.data.label);
    },
    onXmltreestoreExpand: function(treestore, options) {
        console.log("onXmltreestoreExpand()" + " :  treestore.data.label = " + treestore.data.label);
    },
    // Each demo.UserModel instance will be automatically
    // decorated with methods/properties of Ext.data.NodeInterface
    // (i.e., a "node"). Whenever a UserModel node is appended
    // to the tree, this TreeStore will fire an "append" event.
    // http://jsfiddle.net/QvaMG/195/
    onXmltreestoreAppend: function( thisNode, newChildNode, index, eOpts ) {
    },
    onXmltreestoreLoad:function(thisNode,node,records,successful,eOpts){
        console.log("onXmltreestoreLoad");
    }
});